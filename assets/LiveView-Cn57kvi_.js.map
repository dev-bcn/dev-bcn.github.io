{"version":3,"file":"LiveView-Cn57kvi_.js","sources":["../../node_modules/date-fns/addMinutes.js","../../node_modules/date-fns/subMinutes.js","../../src/views/Talks/TalkCardAdapter.ts","../../src/views/Talks/LiveView.tsx"],"sourcesContent":["import { millisecondsInMinute } from \"./constants.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMinutes} function options.\n */\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n * @param options - An object with options\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  _date.setTime(_date.getTime() + amount * millisecondsInMinute);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addMinutes } from \"./addMinutes.js\";\n\n/**\n * The {@link subMinutes} function options.\n */\n\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be subtracted.\n * @param options - An object with options\n *\n * @returns The new date with the minutes subtracted\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\nexport function subMinutes(date, amount, options) {\n  return addMinutes(date, -amount, options);\n}\n\n// Fallback for modularized imports:\nexport default subMinutes;\n","import { UngroupedSession } from \"./liveView.types\";\nimport { TalkCardProps } from \"./components/TalkCard\";\n\nimport {\n  QuestionAnswers,\n  SessionCategory,\n  SessionSpeaker,\n} from \"@/types/sessions\";\n\nexport const talkCardAdapter = (\n  session: UngroupedSession,\n  year: string = \"2024\",\n): TalkCardProps => {\n  return {\n    openFeedbackId: \"\",\n    talk: {\n      id: session.id,\n      title: session.title,\n      talkImage: 1,\n      speakers: session.speakers.map((speaker) => ({\n        id: speaker.id,\n        name: speaker.name,\n      })) as SessionSpeaker[],\n      level: \"Beginner\",\n      link: \"\",\n      tags: [],\n      track: session.room ?? \"Main Stage\",\n      categories: session.categories.map((category) => ({\n        id: category.id,\n        name: category.name,\n        categoryItems: category.categoryItems,\n      })) as SessionCategory[],\n      questionAnswers: session.questionAnswers.map((qa) => ({\n        id: qa.id,\n        question: qa.question,\n        answer: qa.answer,\n      })) as QuestionAnswers[],\n    },\n    year,\n    showTrack: true,\n  };\n};\n","import React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useFetchLiveView } from \"@hooks/useFetchTalks\";\nimport { Loading } from \"@components/Loading/Loading\";\nimport { UngroupedSession } from \"./liveView.types\";\nimport conference from \"@data/2025.json\";\nimport { TalkCard } from \"./components/TalkCard\";\nimport { StyledAgenda, StyledMain } from \"./Talks.style\";\nimport { talkCardAdapter } from \"./TalkCardAdapter\";\nimport { useSentryErrorReport } from \"@hooks/useSentryErrorReport\";\nimport { useDateInterval } from \"@hooks/useDateInterval\";\nimport { addMinutes, isWithinInterval, subMinutes } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport { ROUTE_SCHEDULE } from \"@constants/routes\";\n// @ts-expect-error some quirky import\nimport { AnimatePresence } from \"framer-motion\";\nimport { useDocumentTitleUpdater } from \"@hooks/useDocumentTitleUpdate\";\n\nexport const LiveView: FC<React.PropsWithChildren<unknown>> = () => {\n  const { isLoading, error, data } = useFetchLiveView();\n  const [currentTime, setCurrentTime] = useState<Date>(new Date());\n  const { isConferenceActive } = useDateInterval(currentTime, conference);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const getPredicate = useCallback(\n    () => (session: UngroupedSession) =>\n      isWithinInterval(currentTime, {\n        start: subMinutes(session.startsAt, 10),\n        end: addMinutes(session.endsAt, 30),\n      }),\n    [currentTime],\n  );\n\n  const filteredTalks = useMemo(() => {\n    return data?.filter(getPredicate());\n  }, [data, getPredicate]);\n\n  useDocumentTitleUpdater(\"Live View\", conference.edition);\n  useSentryErrorReport(error);\n\n  return (\n    <StyledMain>\n      <img\n        src=\"/images/logo.png\"\n        alt={conference.title}\n        style={{ width: \"25%\" }}\n      />\n      <h1 style={{ marginTop: \"1rem\" }}>\n        {conference.title} - {conference.edition} Edition\n      </h1>\n\n      {isLoading && <Loading />}\n\n      {!isConferenceActive && <h4>The live schedule is not ready yet</h4>}\n      <StyledAgenda>\n        <AnimatePresence>\n          {isConferenceActive && filteredTalks?.length === 0 && (\n            <p style={{ textAlign: \"center\", flexGrow: \"4\" }}>\n              No sessions available, enjoy the break!\n            </p>\n          )}\n          {filteredTalks?.map((session) => (\n            <TalkCard\n              key={session.id}\n              {...talkCardAdapter(session)}\n              openFeedbackId={conference.openFeedbackId}\n            />\n          ))}\n        </AnimatePresence>\n      </StyledAgenda>\n      {process.env.NODE_ENV === \"test\" ? (\n        <a\n          href={ROUTE_SCHEDULE}\n          style={{\n            textDecoration: \"none\",\n            fontWeight: \"bold\",\n            margin: \"0.5rem\",\n          }}\n        >\n          ðŸ“… Back to schedule\n        </a>\n      ) : (\n        <Link\n          to={ROUTE_SCHEDULE}\n          style={{\n            textDecoration: \"none\",\n            fontWeight: \"bold\",\n            margin: \"0.5rem\",\n          }}\n        >\n          ðŸ“… Back to schedule\n        </Link>\n      )}\n    </StyledMain>\n  );\n};\n"],"names":["addMinutes","date","amount","options","_date","toDate","millisecondsInMinute","subMinutes","talkCardAdapter","session","year","speaker","category","qa","LiveView","isLoading","error","data","useFetchLiveView","currentTime","setCurrentTime","useState","isConferenceActive","useDateInterval","conference","useEffect","intervalId","getPredicate","useCallback","isWithinInterval","filteredTalks","useMemo","useDocumentTitleUpdater","useSentryErrorReport","StyledMain","jsx","Loading","StyledAgenda","jsxs","AnimatePresence","TalkCard","Link","ROUTE_SCHEDULE"],"mappings":"0sBA6BO,SAASA,EAAWC,EAAMC,EAAQC,EAAS,CAChD,MAAMC,EAAQC,EAAOJ,EAAME,GAAS,EAAE,EACtC,OAAAC,EAAM,QAAQA,EAAM,QAAO,EAAKF,EAASI,CAAoB,EACtDF,CACT,CCLO,SAASG,EAAWN,EAAMC,EAAQC,EAAS,CAChD,OAAOH,EAAWC,EAAM,IAASE,CAAO,CAC1C,CCrBO,MAAMK,EAAkB,CAC7BC,EACAC,EAAe,UAER,CACL,eAAgB,GAChB,KAAM,CACJ,GAAID,EAAQ,GACZ,MAAOA,EAAQ,MACf,UAAW,EACX,SAAUA,EAAQ,SAAS,IAAKE,IAAa,CAC3C,GAAIA,EAAQ,GACZ,KAAMA,EAAQ,IAAA,EACd,EACF,MAAO,WACP,KAAM,GACN,KAAM,CAAA,EACN,MAAOF,EAAQ,MAAQ,aACvB,WAAYA,EAAQ,WAAW,IAAKG,IAAc,CAChD,GAAIA,EAAS,GACb,KAAMA,EAAS,KACf,cAAeA,EAAS,aAAA,EACxB,EACF,gBAAiBH,EAAQ,gBAAgB,IAAKI,IAAQ,CACpD,GAAIA,EAAG,GACP,SAAUA,EAAG,SACb,OAAQA,EAAG,MAAA,EACX,CAAA,EAEJ,KAAAH,EACA,UAAW,EAAA,GCtBFI,EAAiD,IAAM,CAClE,KAAM,CAAE,UAAAC,EAAW,MAAAC,EAAO,KAAAC,CAAA,EAASC,EAAA,EAC7B,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAAe,IAAI,IAAM,EACzD,CAAE,mBAAAC,CAAA,EAAuBC,EAAgBJ,EAAaK,CAAU,EAEtEC,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAa,YAAY,IAAM,CACnCN,EAAe,IAAI,IAAM,CAC3B,EAAG,GAAK,EAER,MAAO,IAAM,cAAcM,CAAU,CACvC,EAAG,CAAA,CAAE,EAEL,MAAMC,EAAeC,EAAAA,YACnB,IAAOnB,GACLoB,EAAiBV,EAAa,CAC5B,MAAOZ,EAAWE,EAAQ,QAAY,EACtC,IAAKT,EAAWS,EAAQ,OAAQ,EAAE,CAAA,CACnC,EACH,CAACU,CAAW,CAAA,EAGRW,EAAgBC,EAAAA,QAAQ,IACrBd,GAAM,OAAOU,GAAc,EACjC,CAACV,EAAMU,CAAY,CAAC,EAEvB,OAAAK,EAAwB,YAAaR,EAAW,OAAO,EACvDS,EAAqBjB,CAAK,SAGvBkB,EAAA,CACC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CACC,IAAI,mBACJ,IAAKX,EAAW,MAChB,MAAO,CAAE,MAAO,KAAA,CAAM,CAAA,SAEvB,KAAA,CAAG,MAAO,CAAE,UAAW,MAAA,EACrB,SAAA,CAAAA,EAAW,MAAM,MAAIA,EAAW,QAAQ,UAAA,EAC3C,EAECT,SAAcqB,EAAA,EAAQ,EAEtB,CAACd,GAAsBa,EAAAA,IAAC,KAAA,CAAG,SAAA,qCAAkC,QAC7DE,EAAA,CACC,SAAAC,EAAAA,KAACC,EAAA,CACE,SAAA,CAAAjB,GAAsBQ,GAAe,SAAW,GAC/CK,EAAAA,IAAC,IAAA,CAAE,MAAO,CAAE,UAAW,SAAU,SAAU,GAAA,EAAO,SAAA,0CAElD,EAEDL,GAAe,IAAKrB,GACnB0B,EAAAA,IAACK,EAAA,CAEE,GAAGhC,EAAgBC,CAAO,EAC3B,eAAgBe,EAAW,cAAA,EAFtBf,EAAQ,EAAA,CAIhB,CAAA,CAAA,CACH,CAAA,CACF,EAaE0B,EAAAA,IAACM,EAAA,CACC,GAAIC,EACJ,MAAO,CACL,eAAgB,OAChB,WAAY,OACZ,OAAQ,QAAA,EAEX,SAAA,qBAAA,CAAA,CAED,EAEJ,CAEJ","x_google_ignoreList":[0,1]}