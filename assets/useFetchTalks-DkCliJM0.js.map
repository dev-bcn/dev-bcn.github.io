{"version":3,"file":"useFetchTalks-DkCliJM0.js","sources":["../../src/types/sessions.ts","../../src/services/sessionsAdapter.ts","../../src/hooks/useFetchTalks.ts"],"sourcesContent":["import { ISpeaker } from \"./speakers\";\n\nexport interface SessionSpeaker {\n  readonly id: string;\n  readonly name: string;\n}\n\nexport enum CategoryItemEnum {\n  Language = \"Language\",\n  Track = \"Track\",\n  Format = \"Session format\",\n  Level = \"Level\",\n}\n\ninterface CategoryItem {\n  readonly id: number;\n  readonly name: string;\n}\n\nexport interface SessionCategory {\n  readonly id: number;\n  readonly name: CategoryItemEnum;\n  readonly categoryItems: CategoryItem[];\n}\n\nexport interface Session {\n  readonly id: number;\n  readonly title: string;\n  readonly description: string;\n  readonly startsAt: string;\n  readonly endsAt: string;\n  readonly slidesURL?: string;\n  readonly speakers: SessionSpeaker[];\n  readonly categories: SessionCategory[];\n  readonly questionAnswers: QuestionAnswers[];\n  readonly recordingUrl?: string;\n  readonly track: string;\n}\n\nexport interface IGroup {\n  readonly groupId: number;\n  readonly groupName: string;\n  readonly sessions: Session[];\n  readonly isDefault: boolean;\n}\n\nexport interface QuestionAnswers {\n  readonly id: number;\n  readonly question: string;\n  readonly questionType: string;\n  readonly answer: string;\n}\n\nexport interface IMeeting {\n  id: number;\n  urlName?: string;\n  title: string;\n  description: string;\n  videoUrl?: string;\n  slidesURL?: string;\n  videoTags?: string[];\n  speakers: SessionSpeaker[];\n  level?: string;\n  type?: string;\n  language?: string;\n  track?: string;\n  startDate: string;\n  endDate: string;\n  startTime: string;\n  endTime: string;\n}\n\nexport interface IMeetingDetailProps {\n  meeting: IMeeting;\n  speakers?: ISpeaker[];\n  openFeedbackId: string;\n}\n\nexport type MyType = {\n  urlName?: string;\n  videoUrl?: string;\n  level?: string;\n  videoTags?: string[];\n  speakers?: ISpeaker[];\n  description: string;\n  language?: string;\n  title: string;\n  type?: string;\n  track?: string;\n};\n","import {\n  CategoryItemEnum,\n  IMeeting,\n  QuestionAnswers,\n  Session,\n  SessionCategory,\n} from \"../types/sessions\";\n\nexport const extractSessionTags = (\n  questionAnswers: QuestionAnswers[],\n): string[] | undefined => {\n  const tags = questionAnswers\n    .filter((question) => question.question === \"Tags/Topics\")\n    .map((question) => question.answer)\n    .at(0);\n  return tags?.split(\",\");\n};\nexport const extractSessionSlides = (\n  questionAnswers: QuestionAnswers[],\n): string => {\n  const slides = questionAnswers\n    .filter((question) => question.question === \"Slides\")\n    .map((question) => question.answer)\n    .at(0);\n  return slides ?? \"\";\n};\nconst sessionEmojis: Record<string, string> = {\n  Session: \"üó£\",\n  Workshop: \"üíª\",\n  \"Lightning talk\": \"‚ö°Ô∏è\",\n};\nconst sessionLevel: Record<string, string> = {\n  \"Introductory and overview\": \"‚≠ê\",\n  Intermediate: \"‚≠ê‚≠ê\",\n  Advanced: \"‚≠ê‚≠ê‚≠ê\",\n};\nexport const extractSessionCategoryInfo = (\n  categories: SessionCategory[],\n  item: CategoryItemEnum = CategoryItemEnum.Level,\n): string | undefined => {\n  const info = categories.find((category) => category.name === item)\n    ?.categoryItems?.[0]?.name;\n\n  if (!info) {\n    return undefined;\n  }\n\n  const emojis =\n    item === CategoryItemEnum.Format ? sessionEmojis : sessionLevel;\n\n  for (const [key, value] of Object.entries(emojis)) {\n    if (info.includes(key)) {\n      return `${info} ${value}`;\n    }\n  }\n\n  if (item === CategoryItemEnum.Language && info === \"Spanish\") {\n    return `${info} üá™üá∏`;\n  }\n  if (item === CategoryItemEnum.Language && info === \"English\") {\n    return `${info} üá¨üáß`;\n  }\n\n  return `${info}`;\n};\nexport const sessionAdapter = (\n  session: Session | undefined,\n): IMeeting | undefined => {\n  if (session === undefined) {\n    return undefined;\n  }\n  return {\n    description: session.description,\n    endDate: session.endsAt !== null ? session.endsAt.split(\"T\")[0] : \"\",\n    endTime: session.endsAt !== null ? session.endsAt.split(\"T\")[1] : \"\",\n    id: session.id,\n    language: extractSessionCategoryInfo(\n      session.categories,\n      CategoryItemEnum.Language,\n    ),\n    level: extractSessionCategoryInfo(session?.categories),\n    slidesURL: extractSessionSlides(session.questionAnswers),\n    speakers: session.speakers,\n    startDate: session.startsAt !== null ? session.startsAt.split(\"T\")[0] : \"\",\n    startTime: session.startsAt !== null ? session.startsAt.split(\"T\")[1] : \"\",\n    title: session.title,\n    track: extractSessionCategoryInfo(\n      session.categories,\n      CategoryItemEnum.Track,\n    ),\n    type: extractSessionCategoryInfo(\n      session.categories,\n      CategoryItemEnum.Format,\n    ),\n    videoTags: extractSessionTags(session.questionAnswers),\n    videoUrl: session.recordingUrl,\n  };\n};\n","import { useQuery, UseQueryResult } from \"react-query\";\nimport axios from \"axios\";\nimport { UngroupedSession } from \"@views/Talks/liveView.types\";\n\nimport { IGroup, Session } from \"@/types/sessions\";\n\nconst URLS = {\n  default: \"https://sessionize.com/api/v2/xhudniix/view/Sessions\",\n  2023: \"https://sessionize.com/api/v2/ttsitynd/view/Sessions\",\n  2024: \"https://sessionize.com/api/v2/teq4asez/view/Sessions\",\n};\n\n/**\n * Determines the URL to use based on the urlOrYear parameter\n * @param urlOrYear - Optional URL or year to use\n * @returns The URL to use\n */\nconst getUrl = (urlOrYear?: string): string => {\n  let url = URLS.default;\n\n  if (urlOrYear) {\n    // If urlOrYear starts with http, it's a URL\n    if (urlOrYear.startsWith(\"http\")) {\n      url = urlOrYear;\n    }\n    // If urlOrYear is a year key in URLS, use that URL\n    else if (urlOrYear in URLS) {\n      url = URLS[urlOrYear as keyof typeof URLS];\n    }\n  }\n\n  return url;\n};\n\n/**\n * Base hook for fetching talks data\n * @param queryKey - The query key to use\n * @param urlOrYear - Optional URL or year to use\n * @param dataTransformer - Function to transform the response data\n * @returns The query result\n */\nconst useFetchTalksBase = <T>(\n  queryKey: string | (string | undefined)[],\n  urlOrYear?: string,\n  dataTransformer: (data: IGroup[]) => T = (data: IGroup[]) =>\n    data as unknown as T,\n): UseQueryResult<T> => {\n  const url = getUrl(urlOrYear);\n\n  return useQuery(\n    queryKey,\n    async () => {\n      const response = await axios.get(url);\n      return dataTransformer(response.data);\n    },\n    {\n      cacheTime: 1800000, // 30 minutes\n      staleTime: 1800000, // 30 minutes\n    },\n  );\n};\n\nexport const useFetchTalks = (urlOrYear?: string): UseQueryResult<IGroup[]> => {\n  return useFetchTalksBase<IGroup[]>(\"api-talks\", urlOrYear);\n};\n\nexport const useFetchTalksById = (\n  id: string,\n  urlOrYear?: string,\n): UseQueryResult<Session> => {\n  return useFetchTalksBase<Session>(\n    [\"talks\", id],\n    urlOrYear,\n    (data: IGroup[]) => {\n      const sessions = data\n        .map((track: IGroup) => track.sessions)\n        .flat(1)\n        .filter(\n          (session: { id: number | string }) => String(session.id) === id,\n        );\n      return sessions[0];\n    },\n  );\n};\n\nexport const useFetchLiveView = (\n  urlOrYear?: string,\n): UseQueryResult<UngroupedSession[]> => {\n  return useFetchTalksBase<Session[]>(\n    \"api-talks\",\n    urlOrYear,\n    (data): UngroupedSession[] =>\n      data.map((track: IGroup) => track.sessions).flat(1),\n  );\n};\n"],"names":["CategoryItemEnum","extractSessionTags","questionAnswers","tags","question","extractSessionSlides","sessionEmojis","sessionLevel","extractSessionCategoryInfo","categories","item","info","_c","_b","_a","category","emojis","key","value","sessionAdapter","session","URLS","getUrl","urlOrYear","url","useFetchTalksBase","queryKey","dataTransformer","data","useQuery","response","axios","useFetchTalks","useFetchTalksById","id","track","useFetchLiveView"],"mappings":"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"}